{"version":3,"file":"static/js/961.08bce167.chunk.js","mappings":"mKAGA,SAASA,EAAT,GAA+B,EAAbC,UACJC,EAAAA,QAAAA,OAAiBA,EAAAA,QAAAA,QAC9B,CAEDF,EAAOG,UAAY,CAAEF,UAAWG,IAAAA,KAAAA,YAEhC,K,kIC2GA,UA9GqB,WAAO,IAAD,IACzB,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOJ,EAAP,KAAkBO,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAEnDC,EACNb,EADMa,MAAOC,EACbd,EADac,KAAMC,EACnBf,EADmBe,aAAcC,EACjChB,EADiCgB,SAAUC,EAC3CjB,EAD2CiB,OAAQC,EACnDlB,EADmDkB,YAE/CC,EAAU,OAAGN,QAAH,IAAGA,EAAAA,EAASC,GAE5BM,EAAAA,EAAAA,YAAU,YACR,iBAAC,8GAEsBC,EAAAA,EAAAA,IAAgB,sCAAD,OACMhB,EADN,8CAFrC,OAESiB,EAFT,OAMGrB,EAAaqB,GANhB,gDAQGlB,EAAS,EAAD,IARX,yBAUGF,GAAa,GAVhB,2EAAD,EAaD,GAAE,CAACG,IAWJ,OACE,iCACE,SAAC,IAAD,CAAQV,UAAWA,IAClBQ,GACC,iCACE,mBACEoB,KAAK,SACLC,UAAU,+FAFZ,UAIE,SAAC,KAAD,CACEC,GAAIhB,EAAoBiB,QACxBF,UAAU,4BAFZ,wBAOF,gDAGD7B,IACC,iCACE,mBACE4B,KAAK,SACLC,UAAU,+FAFZ,UAIE,SAAC,KAAD,CACEC,GAAIhB,EAAoBiB,QACxBF,UAAU,4BAFZ,wBAOF,iBAAKA,UAAU,iBAAf,WACE,gBAAKA,UAAU,iBAAf,SACGN,GACC,gBACES,IAAG,yCAAoCT,GACvCU,IAAKT,KAGP,gBAAKQ,IAAKE,EAAaD,IAAKT,OAGhC,iBAAKK,UAAU,QAAf,WACE,wBAAKL,KACL,wCAlDQ,WACpB,IAAMW,EAA2B,GAAff,EAClB,OAAOgB,KAAKC,MAAMF,EACnB,CA+C6BG,GAAhB,QACA,sCACA,uBAAIjB,KACJ,oCACA,uBAzDLC,EAAOiB,KAAI,SAAAC,GAAK,OAAIA,EAAMrB,IAAV,IAAgBsB,KAAK,cA4DpC,iBAAKZ,UAAU,iBAAf,WACE,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,8BAIN,SAAC,EAAAY,SAAD,WACE,SAAC,KAAD,WAOb,C,wMChHcC,EAAY,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BC,GAA3B,oGAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUjB,EAFV,OAGYmB,EAAYnB,EAAKoB,KAAjBD,QAEFE,EAAgBF,EAAQP,KAAI,kBAA0B,CAC1DU,GADgC,EAAGA,GAEnC/B,MAFgC,EAAOA,MAGvCC,KAHgC,EAAcA,KAAd,IALtC,kBAUW6B,GAVX,sCAYU,IAAIE,MAAJ,MAZV,yFAgBeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BP,GAA5B,oGAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUjB,EAFV,OAGYmB,EAAYnB,EAAKoB,KAAjBD,QAEFE,EAAgBF,EAAQP,KAAI,kBAAoB,CACpDU,GADgC,EAAGA,GAEnC/B,MAFgC,EAAOA,MAAP,IALtC,kBASW8B,GATX,sCAWU,IAAIE,MAAJ,MAXV,yFAeexB,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BkB,GAA/B,gHAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUjB,EAFV,SAIMA,EAAKoB,KADC7B,EAHZ,EAGYA,MAAOC,EAHnB,EAGmBA,KAAMC,EAHzB,EAGyBA,aAAcC,EAHvC,EAGuCA,SAAUC,EAHjD,EAGiDA,OAAQC,EAHzD,EAGyDA,YAG/ClB,EAAY,CAChBa,MAAAA,EACAC,KAAAA,EACAC,aAAAA,EACAC,SAAAA,EACAC,OAAAA,EACAC,YAAAA,GAZN,kBAeWlB,GAfX,sCAiBU,IAAI6C,MAAJ,MAjBV,yFAqBeE,EAAQ,GAARA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAuBR,GAAvB,oGAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUjB,EAFV,OAGY0B,EAAS1B,EAAKoB,KAAdM,KAEFC,EAAWD,EAAKd,KAAI,kBAA4C,CACpEpB,KADwB,EAAGA,KAE3BoC,UAFwB,EAASA,UAGjCC,aAHwB,EAAoBA,aAI5CP,GAJwB,EAAkCA,GAAlC,IAL9B,kBAYWK,GAZX,sCAcU,IAAIJ,MAAJ,MAdV,yFAkBeO,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0Bb,GAA1B,oGAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUjB,EAFV,OAGYmB,EAAYnB,EAAKoB,KAAjBD,QAEFY,EAAcZ,EAAQP,KAAI,kBAA8B,CAC5DoB,OAD8B,EAAGA,OAEjCC,QAF8B,EAAWA,QAGzCX,GAH8B,EAAoBA,GAApB,IALpC,kBAWWS,GAXX,sCAaU,IAAIR,MAAJ,MAbV,gF","sources":["components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.jsx","utils/js/fetch.js"],"sourcesContent":["import { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport PropTypes from 'prop-types';\n\nfunction Loader({ isLoading }) {\n  isLoading ? Loading.dots() : Loading.remove();\n}\n\nLoader.propTypes = { isLoading: PropTypes.bool.isRequired };\n\nexport default Loader;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport imgNotFound from 'images/image-not-found.png';\nimport Loader from 'components/Loader/Loader';\nimport { getMovieDetails } from 'utils/js/fetch';\n\nconst MovieDetails = () => {\n  const [dataMovie, setDataMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  const { title, name, vote_average, overview, genres, poster_path } =\n    dataMovie;\n  const movieTitle = title ?? name;\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const resp = await getMovieDetails(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=38126fe3d6cea635722ecf700f4bc3bf`\n        );\n\n        setDataMovie(resp);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  const selectionGenres = () => {\n    return genres.map(genre => genre.name).join(' ');\n  };\n\n  const calcUserScore = () => {\n    const userScore = vote_average * 10;\n    return Math.round(userScore);\n  };\n\n  return (\n    <>\n      <Loader isLoading={isLoading} />\n      {error ? (\n        <>\n          <button\n            type=\"button\"\n            className=\"mb-5 hover:bg-violet-300 focus:bg-violet-300 hover:border-violet-300 focus:border-violet-300\"\n          >\n            <Link\n              to={backLinkLocationRef.current}\n              className=\"no-underline text-inherit\"\n            >\n              Go back\n            </Link>\n          </button>\n          <div>Page not found</div>\n        </>\n      ) : (\n        !isLoading && (\n          <>\n            <button\n              type=\"button\"\n              className=\"mb-5 hover:bg-violet-300 focus:bg-violet-300 hover:border-violet-300 focus:border-violet-300\"\n            >\n              <Link\n                to={backLinkLocationRef.current}\n                className=\"no-underline text-inherit\"\n              >\n                Go back\n              </Link>\n            </button>\n            <div className=\"flex shadow-md\">\n              <div className=\"mr-5 w-50 h-76\">\n                {poster_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200${poster_path}`}\n                    alt={movieTitle}\n                  />\n                ) : (\n                  <img src={imgNotFound} alt={movieTitle} />\n                )}\n              </div>\n              <div className=\"w-3/4\">\n                <h1>{movieTitle}</h1>\n                <p>User Score: {calcUserScore()}%</p>\n                <h2>Overview</h2>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{selectionGenres()}</p>\n              </div>\n            </div>\n            <div className=\"pb-5 shadow-md\">\n              <p>Additional information</p>\n              <ul>\n                <li>\n                  <Link to=\"cast\">Cast</Link>\n                </li>\n                <li>\n                  <Link to=\"reviews\">Reviews</Link>\n                </li>\n              </ul>\n            </div>\n            <Suspense>\n              <Outlet />\n            </Suspense>\n          </>\n        )\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nasync function getTrending(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title, name }) => ({\n      id,\n      title,\n      name,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function searchMovies(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getMovieDetails(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { title, name, vote_average, overview, genres, poster_path } =\n      resp.data;\n\n    const dataMovie = {\n      title,\n      name,\n      vote_average,\n      overview,\n      genres,\n      poster_path,\n    };\n\n    return dataMovie;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getCast(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { cast } = resp.data;\n\n    const dataCast = cast.map(({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    }));\n\n    return dataCast;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getReviews(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataReviews = results.map(({ author, content, id }) => ({\n      author,\n      content,\n      id,\n    }));\n\n    return dataReviews;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport { getTrending, getMovieDetails, searchMovies, getCast, getReviews };\n"],"names":["Loader","isLoading","Loading","propTypes","PropTypes","useState","dataMovie","setDataMovie","setIsLoading","error","setError","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","title","name","vote_average","overview","genres","poster_path","movieTitle","useEffect","getMovieDetails","resp","type","className","to","current","src","alt","imgNotFound","userScore","Math","round","calcUserScore","map","genre","join","Suspense","getTrending","URL","axios","results","data","dataMovieList","id","Error","searchMovies","getCast","cast","dataCast","character","profile_path","getReviews","dataReviews","author","content"],"sourceRoot":""}