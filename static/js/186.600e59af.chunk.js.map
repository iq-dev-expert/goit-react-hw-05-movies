{"version":3,"file":"static/js/186.600e59af.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/Reviews/Reviews.jsx","utils/js/fetch.js"],"sourcesContent":["import { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport PropTypes from 'prop-types';\n\nfunction Loader({ isLoading }) {\n  isLoading ? Loading.dots() : Loading.remove();\n}\n\nLoader.propTypes = { isLoading: PropTypes.bool.isRequired };\n\nexport default Loader;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport { getReviews } from 'utils/js/fetch';\n\nconst Reviews = () => {\n  const [dataReviews, setDataReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    (async () => {\n      try {\n        const resp = await getReviews(movieId);\n\n        if (resp.length === 0) {\n          setError(true);\n        }\n\n        setDataReviews(resp);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      <Loader isLoading={isLoading} />\n      {!error ? (\n        <ul className=\"py-5\">\n          {dataReviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <p>Author: {author}</p>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: '38126fe3d6cea635722ecf700f4bc3bf' };\n\nasync function getTrending() {\n  const END_POINT = '/trending/all/day';\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title, name }) => ({\n      id,\n      title,\n      name,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function searchMovies(query) {\n  const END_POINT = `/search/movie?query=${query}&include_adult=false&language=en-US&page=1`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getMovieDetails(movieId) {\n  const END_POINT = `/movie/${movieId}`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { title, name, vote_average, overview, genres, poster_path } =\n      resp.data;\n\n    const dataMovie = {\n      title,\n      name,\n      vote_average,\n      overview,\n      genres,\n      poster_path,\n    };\n\n    return dataMovie;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getCast(movieId) {\n  const END_POINT = `/movie/${movieId}/credits?language=en-US`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { cast } = resp.data;\n\n    const dataCast = cast.map(({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    }));\n\n    return dataCast;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getReviews(movieId) {\n  const END_POINT = `/movie/${movieId}/reviews?language=en-US&page=1`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { results } = resp.data;\n\n    const dataReviews = results.map(({ author, content, id }) => ({\n      author,\n      content,\n      id,\n    }));\n\n    return dataReviews;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport { getTrending, getMovieDetails, searchMovies, getCast, getReviews };\n"],"names":["Loader","isLoading","Loading","propTypes","PropTypes","useState","dataReviews","setDataReviews","setIsLoading","error","setError","movieId","useParams","useEffect","getReviews","resp","length","console","log","className","map","author","content","id","getTrending","axios","results","data","dataMovieList","title","name","Error","searchMovies","query","END_POINT","getMovieDetails","vote_average","overview","genres","poster_path","dataMovie","getCast","cast","dataCast","character","profile_path","api_key"],"sourceRoot":""}