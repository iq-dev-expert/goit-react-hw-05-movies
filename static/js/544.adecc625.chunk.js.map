{"version":3,"file":"static/js/544.adecc625.chunk.js","mappings":"mKAGA,SAASA,EAAT,GAA+B,EAAbC,UACJC,EAAAA,QAAAA,OAAiBA,EAAAA,QAAAA,QAC9B,CAEDF,EAAOG,UAAY,CAAEF,UAAWG,IAAAA,KAAAA,YAEhC,K,oECNMC,EAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAWG,KAAI,SAAAC,GAAU,IAAD,EACjBC,EAAU,UAAGD,EAAME,aAAT,QAAkBF,EAAMG,KAExC,OACE,yBACE,SAAC,KAAD,CACEC,GAAE,kBAAaJ,EAAMK,IACrBC,MAAO,CACLC,KAAMV,GAHV,SAMGI,KAPID,EAAMK,GAWlB,KAGN,EAEDV,EAAUa,SAAWd,IAAAA,QAAkBA,IAAAA,OAAAA,YAA6Be,WACpE,K,kHCKA,UA7Ba,WACX,OAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOnB,EAAP,KAAkBsB,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,8GAEsBC,EAAAA,EAAAA,IACjB,0FAHL,OAESC,EAFT,OAMGJ,EAAiBI,GANpB,gDAQGC,QAAQC,IAAR,MARH,yBAUGL,GAAa,GAVhB,2EAAD,EAaD,GAAE,KAGD,iCACE,SAAC,IAAD,CAAQtB,UAAWA,KACnB,eAAI4B,UAAU,WAAd,6BACE5B,IAAa,SAAC,IAAD,CAAWK,WAAYe,MAG3C,C,wMC9BcI,EAAY,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BK,GAA3B,oGAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUJ,EAFV,OAGYM,EAAYN,EAAKO,KAAjBD,QAEFX,EAAgBW,EAAQvB,KAAI,kBAA0B,CAC1DM,GADgC,EAAGA,GAEnCH,MAFgC,EAAOA,MAGvCC,KAHgC,EAAcA,KAAd,IALtC,kBAUWQ,GAVX,sCAYU,IAAIa,MAAJ,MAZV,yFAgBeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BL,GAA5B,oGAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUJ,EAFV,OAGYM,EAAYN,EAAKO,KAAjBD,QAEFX,EAAgBW,EAAQvB,KAAI,kBAAoB,CACpDM,GADgC,EAAGA,GAEnCH,MAFgC,EAAOA,MAAP,IALtC,kBASWS,GATX,sCAWU,IAAIa,MAAJ,MAXV,yFAeeE,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BN,GAA/B,gHAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUJ,EAFV,SAIMA,EAAKO,KADCrB,EAHZ,EAGYA,MAAOC,EAHnB,EAGmBA,KAAMwB,EAHzB,EAGyBA,aAAcC,EAHvC,EAGuCA,SAAUC,EAHjD,EAGiDA,OAAQC,EAHzD,EAGyDA,YAG/CC,EAAY,CAChB7B,MAAAA,EACAC,KAAAA,EACAwB,aAAAA,EACAC,SAAAA,EACAC,OAAAA,EACAC,YAAAA,GAZN,kBAeWC,GAfX,sCAiBU,IAAIP,MAAJ,MAjBV,yFAqBeQ,EAAQ,GAARA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAuBZ,GAAvB,oGAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUJ,EAFV,OAGYiB,EAASjB,EAAKO,KAAdU,KAEFC,EAAWD,EAAKlC,KAAI,kBAA4C,CACpEI,KADwB,EAAGA,KAE3BgC,UAFwB,EAASA,UAGjCC,aAHwB,EAAoBA,aAI5C/B,GAJwB,EAAkCA,GAAlC,IAL9B,kBAYW6B,GAZX,sCAcU,IAAIV,MAAJ,MAdV,yFAkBea,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BjB,GAA1B,oGAEuBC,EAAAA,EAAAA,IAAUD,GAFjC,cAEUJ,EAFV,OAGYM,EAAYN,EAAKO,KAAjBD,QAEFgB,EAAchB,EAAQvB,KAAI,kBAA8B,CAC5DwC,OAD8B,EAAGA,OAEjCC,QAF8B,EAAWA,QAGzCnC,GAH8B,EAAoBA,GAApB,IALpC,kBAWWiC,GAXX,sCAaU,IAAId,MAAJ,MAbV,gF","sources":["components/Loader/Loader.jsx","components/MovieList/MovieList.jsx","pages/Home/Home.jsx","utils/js/fetch.js"],"sourcesContent":["import { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport PropTypes from 'prop-types';\n\nfunction Loader({ isLoading }) {\n  isLoading ? Loading.dots() : Loading.remove();\n}\n\nLoader.propTypes = { isLoading: PropTypes.bool.isRequired };\n\nexport default Loader;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ dataMovies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {dataMovies.map(movie => {\n        const movieTitle = movie.title ?? movie.name;\n\n        return (\n          <li key={movie.id}>\n            <Link\n              to={`/movies/${movie.id}`}\n              state={{\n                from: location,\n              }}\n            >\n              {movieTitle}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nMovieList.propType = PropTypes.arrayOf(PropTypes.object.isRequired).isRequired;\nexport default MovieList;\n","import { useEffect, useState } from 'react';\nimport MovieList from 'components/MovieList/MovieList';\nimport Loader from 'components/Loader/Loader';\nimport { getTrending } from 'utils/js/fetch';\n\nconst Home = () => {\n  const [dataMovieList, setDataMovieList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const resp = await getTrending(\n          'https://api.themoviedb.org/3/trending/all/day?api_key=38126fe3d6cea635722ecf700f4bc3bf'\n        );\n\n        setDataMovieList(resp);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      <Loader isLoading={isLoading} />\n      <h1 className=\"text-4xl\">Trending today</h1>\n      {!isLoading && <MovieList dataMovies={dataMovieList} />}\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nasync function getTrending(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title, name }) => ({\n      id,\n      title,\n      name,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function searchMovies(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getMovieDetails(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { title, name, vote_average, overview, genres, poster_path } =\n      resp.data;\n\n    const dataMovie = {\n      title,\n      name,\n      vote_average,\n      overview,\n      genres,\n      poster_path,\n    };\n\n    return dataMovie;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getCast(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { cast } = resp.data;\n\n    const dataCast = cast.map(({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    }));\n\n    return dataCast;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getReviews(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataReviews = results.map(({ author, content, id }) => ({\n      author,\n      content,\n      id,\n    }));\n\n    return dataReviews;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport { getTrending, getMovieDetails, searchMovies, getCast, getReviews };\n"],"names":["Loader","isLoading","Loading","propTypes","PropTypes","MovieList","dataMovies","location","useLocation","map","movie","movieTitle","title","name","to","id","state","from","propType","isRequired","useState","dataMovieList","setDataMovieList","setIsLoading","useEffect","getTrending","resp","console","log","className","URL","axios","results","data","Error","searchMovies","getMovieDetails","vote_average","overview","genres","poster_path","dataMovie","getCast","cast","dataCast","character","profile_path","getReviews","dataReviews","author","content"],"sourceRoot":""}