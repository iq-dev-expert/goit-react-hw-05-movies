{"version":3,"file":"static/js/961.270fa85a.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.jsx","utils/js/fetch.js"],"sourcesContent":["import { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport PropTypes from 'prop-types';\n\nfunction Loader({ isLoading }) {\n  isLoading ? Loading.dots() : Loading.remove();\n}\n\nLoader.propTypes = { isLoading: PropTypes.bool.isRequired };\n\nexport default Loader;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport imgNotFound from 'images/image-not-found.png';\nimport Loader from 'components/Loader/Loader';\nimport { getMovieDetails } from 'utils/js/fetch';\n\nconst MovieDetails = () => {\n  const [dataMovie, setDataMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  const { title, name, vote_average, overview, genres, poster_path } =\n    dataMovie;\n  const movieTitle = title ?? name;\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const resp = await getMovieDetails(movieId);\n\n        setDataMovie(resp);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  const getPoster = poster_path =>\n    poster_path ? `https://image.tmdb.org/t/p/w200${poster_path}` : imgNotFound;\n\n  const selectionGenres = () => {\n    return genres.map(genre => genre.name).join(' ');\n  };\n\n  const calcUserScore = () => {\n    const userScore = vote_average * 10;\n    return Math.round(userScore);\n  };\n\n  return (\n    <>\n      <Loader isLoading={isLoading} />\n      {error ? (\n        <>\n          <button\n            type=\"button\"\n            className=\"mb-5 hover:bg-violet-300 focus:bg-violet-300 hover:border-violet-300 focus:border-violet-300\"\n          >\n            <Link\n              to={backLinkLocationRef.current}\n              className=\"no-underline text-inherit\"\n            >\n              Go back\n            </Link>\n          </button>\n          <div>Page not found</div>\n        </>\n      ) : (\n        !isLoading && (\n          <>\n            <button\n              type=\"button\"\n              className=\"mb-5 hover:bg-violet-300 focus:bg-violet-300 hover:border-violet-300 focus:border-violet-300\"\n            >\n              <Link\n                to={backLinkLocationRef.current}\n                className=\"no-underline text-inherit\"\n              >\n                Go back\n              </Link>\n            </button>\n            <div className=\"flex shadow-md\">\n              <div className=\"mr-5 w-50 h-76\">\n                <img src={getPoster(poster_path)} alt={movieTitle} />\n              </div>\n              <div className=\"w-3/4\">\n                <h1>{movieTitle}</h1>\n                <p>User Score: {calcUserScore()}%</p>\n                <h2>Overview</h2>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <p>{selectionGenres()}</p>\n              </div>\n            </div>\n            <div className=\"pb-5 shadow-md\">\n              <p>Additional information</p>\n              <ul>\n                <li>\n                  <Link to=\"cast\">Cast</Link>\n                </li>\n                <li>\n                  <Link to=\"reviews\">Reviews</Link>\n                </li>\n              </ul>\n            </div>\n            <Suspense>\n              <Outlet />\n            </Suspense>\n          </>\n        )\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: '38126fe3d6cea635722ecf700f4bc3bf' };\n\nasync function getTrending() {\n  const END_POINT = '/trending/all/day';\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title, name }) => ({\n      id,\n      title,\n      name,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function searchMovies(query) {\n  const END_POINT = `/search/movie?query=${query}&include_adult=false&language=en-US&page=1`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getMovieDetails(movieId) {\n  const END_POINT = `/movie/${movieId}`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { title, name, vote_average, overview, genres, poster_path } =\n      resp.data;\n\n    const dataMovie = {\n      title,\n      name,\n      vote_average,\n      overview,\n      genres,\n      poster_path,\n    };\n\n    return dataMovie;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getCast(movieId) {\n  const END_POINT = `/movie/${movieId}/credits?language=en-US`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { cast } = resp.data;\n\n    const dataCast = cast.map(({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    }));\n\n    return dataCast;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getReviews(movieId) {\n  const END_POINT = `/movie/${movieId}/reviews?language=en-US&page=1`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { results } = resp.data;\n\n    const dataReviews = results.map(({ author, content, id }) => ({\n      author,\n      content,\n      id,\n    }));\n\n    return dataReviews;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport { getTrending, getMovieDetails, searchMovies, getCast, getReviews };\n"],"names":["Loader","isLoading","Loading","propTypes","PropTypes","useState","dataMovie","setDataMovie","setIsLoading","error","setError","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","title","name","vote_average","overview","genres","poster_path","movieTitle","useEffect","getMovieDetails","resp","type","className","to","current","src","imgNotFound","getPoster","alt","userScore","Math","round","calcUserScore","map","genre","join","Suspense","getTrending","axios","results","data","dataMovieList","id","Error","searchMovies","query","END_POINT","getCast","cast","dataCast","character","profile_path","getReviews","dataReviews","author","content","api_key"],"sourceRoot":""}