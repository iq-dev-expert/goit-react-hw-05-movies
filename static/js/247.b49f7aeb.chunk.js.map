{"version":3,"file":"static/js/247.b49f7aeb.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/Loader/Loader.jsx","utils/js/fetch.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport imgNotFound from 'images/image-not-found.png';\nimport Loader from 'components/Loader/Loader';\nimport { getCast } from 'utils/js/fetch';\n\nconst Cast = () => {\n  const [dataCast, setDataCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    (async () => {\n      try {\n        const resp = await getCast(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=38126fe3d6cea635722ecf700f4bc3bf&language=en-US`\n        );\n\n        setDataCast(resp);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      <Loader isLoading={isLoading} />\n      {!isLoading && dataCast.length !== 0 ? (\n        <ul className=\"py-5\">\n          {dataCast.map(({ name, character, profile_path, id }) => (\n            <li key={id}>\n              <div className=\"w-50 h-76\">\n                {profile_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                    alt={name}\n                  />\n                ) : (\n                  <img src={imgNotFound} alt={name} />\n                )}\n              </div>\n              <p>Actor: {name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any cast for this movie.</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport PropTypes from 'prop-types';\n\nfunction Loader({ isLoading }) {\n  isLoading ? Loading.dots() : Loading.remove();\n}\n\nLoader.propTypes = { isLoading: PropTypes.bool.isRequired };\n\nexport default Loader;\n","import axios from 'axios';\n\nasync function getTrending(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title, name }) => ({\n      id,\n      title,\n      name,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function searchMovies(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getMovieDetails(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { title, name, vote_average, overview, genres, poster_path } =\n      resp.data;\n\n    const dataMovie = {\n      title,\n      name,\n      vote_average,\n      overview,\n      genres,\n      poster_path,\n    };\n\n    return dataMovie;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getCast(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { cast } = resp.data;\n\n    const dataCast = cast.map(({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    }));\n\n    return dataCast;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getReviews(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataReviews = results.map(({ author, content, id }) => ({\n      author,\n      content,\n      id,\n    }));\n\n    return dataReviews;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport { getTrending, getMovieDetails, searchMovies, getCast, getReviews };\n"],"names":["useState","dataCast","setDataCast","isLoading","setIsLoading","movieId","useParams","useEffect","getCast","resp","console","log","length","className","map","name","character","profile_path","id","src","alt","imgNotFound","Loader","Loading","propTypes","PropTypes","getTrending","URL","axios","results","data","dataMovieList","title","Error","searchMovies","getMovieDetails","vote_average","overview","genres","poster_path","dataMovie","cast","getReviews","dataReviews","author","content"],"sourceRoot":""}