{"version":3,"file":"static/js/247.2d09ae4c.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/Loader/Loader.jsx","utils/js/fetch.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport imgNotFound from 'images/image-not-found.png';\nimport Loader from 'components/Loader/Loader';\nimport { getCast } from 'utils/js/fetch';\n\nconst Cast = () => {\n  const [dataCast, setDataCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    (async () => {\n      try {\n        const resp = await getCast(movieId);\n\n        if (resp.length === 0) {\n          setError(true);\n        }\n\n        setDataCast(resp);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  const getPoster = profile_path =>\n    profile_path\n      ? `https://image.tmdb.org/t/p/w200${profile_path}`\n      : imgNotFound;\n\n  return (\n    <>\n      <Loader isLoading={isLoading} />\n      {!error ? (\n        <ul className=\"py-5\">\n          {dataCast.map(({ name, character, profile_path, id }) => (\n            <li key={id}>\n              <div className=\"w-50 h-76\">\n                <img src={getPoster(profile_path)} alt={name} />\n              </div>\n              <p>Actor: {name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any cast for this movie.</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport PropTypes from 'prop-types';\n\nfunction Loader({ isLoading }) {\n  isLoading ? Loading.dots() : Loading.remove();\n}\n\nLoader.propTypes = { isLoading: PropTypes.bool.isRequired };\n\nexport default Loader;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: '38126fe3d6cea635722ecf700f4bc3bf' };\n\nasync function getTrending() {\n  const END_POINT = '/trending/all/day';\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title, name }) => ({\n      id,\n      title,\n      name,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function searchMovies(query) {\n  const END_POINT = `/search/movie?query=${query}&include_adult=false&language=en-US&page=1`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getMovieDetails(movieId) {\n  const END_POINT = `/movie/${movieId}`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { title, name, vote_average, overview, genres, poster_path } =\n      resp.data;\n\n    const dataMovie = {\n      title,\n      name,\n      vote_average,\n      overview,\n      genres,\n      poster_path,\n    };\n\n    return dataMovie;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getCast(movieId) {\n  const END_POINT = `/movie/${movieId}/credits?language=en-US`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { cast } = resp.data;\n\n    const dataCast = cast.map(({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    }));\n\n    return dataCast;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getReviews(movieId) {\n  const END_POINT = `/movie/${movieId}/reviews?language=en-US&page=1`;\n\n  try {\n    const resp = await axios.get(END_POINT);\n    const { results } = resp.data;\n\n    const dataReviews = results.map(({ author, content, id }) => ({\n      author,\n      content,\n      id,\n    }));\n\n    return dataReviews;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport { getTrending, getMovieDetails, searchMovies, getCast, getReviews };\n"],"names":["useState","dataCast","setDataCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getCast","resp","length","console","log","getPoster","profile_path","imgNotFound","className","map","name","character","id","src","alt","Loader","Loading","propTypes","PropTypes","getTrending","axios","results","data","dataMovieList","title","Error","searchMovies","query","END_POINT","getMovieDetails","vote_average","overview","genres","poster_path","dataMovie","cast","getReviews","dataReviews","author","content","api_key"],"sourceRoot":""}