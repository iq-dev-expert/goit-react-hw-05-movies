{"version":3,"file":"static/js/650.1b192b59.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/MovieList/MovieList.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx","utils/js/fetch.js"],"sourcesContent":["import { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport PropTypes from 'prop-types';\n\nfunction Loader({ isLoading }) {\n  isLoading ? Loading.dots() : Loading.remove();\n}\n\nLoader.propTypes = { isLoading: PropTypes.bool.isRequired };\n\nexport default Loader;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ dataMovies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {dataMovies.map(movie => {\n        const movieTitle = movie.title ?? movie.name;\n\n        return (\n          <li key={movie.id}>\n            <Link\n              to={`/movies/${movie.id}`}\n              state={{\n                from: location,\n              }}\n            >\n              {movieTitle}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nMovieList.propType = PropTypes.arrayOf(PropTypes.object.isRequired).isRequired;\nexport default MovieList;\n","import { useSearchParams } from 'react-router-dom';\n\nconst Searchbar = () => {\n  const [, setSearchParams] = useSearchParams();\n\n  const onSearchButtonClick = e => {\n    e.preventDefault();\n    const inputValue = e.target.query.value.trim().toLowerCase();\n\n    if (!inputValue) {\n      return;\n    }\n\n    setSearchParams({ query: inputValue });\n    e.target.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={onSearchButtonClick} className=\"mb-5\">\n        <input\n          name=\"query\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          className=\"w-80 mr-5\"\n        />\n\n        <button\n          type=\"submit\"\n          className=\"hover:bg-violet-300 focus:bg-violet-300 hover:border-violet-300 focus:border-violet-300\"\n        >\n          <span>Search</span>\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default Searchbar;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport MovieList from 'components/MovieList/MovieList';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport Loader from 'components/Loader/Loader';\nimport { searchMovies } from 'utils/js/fetch';\n\nconst Movies = () => {\n  const [dataSearchMovies, setSearchMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [searchParams] = useSearchParams({});\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    (async () => {\n      setIsLoading(true);\n\n      try {\n        const resp = await searchMovies(\n          `https://api.themoviedb.org/3/search/movie?api_key=38126fe3d6cea635722ecf700f4bc3bf&query=${query}&include_adult=false&language=en-US&page=1`\n        );\n\n        if (resp.length === 0) {\n          setError(true);\n        } else {\n          setError(false);\n        }\n\n        setSearchMovies(resp);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [query]);\n\n  return (\n    <>\n      <Loader isLoading={isLoading} />\n      <Searchbar />\n      {error ? (\n        <div>{query} film does not exist!</div>\n      ) : (\n        !isLoading && <MovieList dataMovies={dataSearchMovies} />\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nasync function getTrending(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title, name }) => ({\n      id,\n      title,\n      name,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function searchMovies(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataMovieList = results.map(({ id, title }) => ({\n      id,\n      title,\n    }));\n    return dataMovieList;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getMovieDetails(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { title, name, vote_average, overview, genres, poster_path } =\n      resp.data;\n\n    const dataMovie = {\n      title,\n      name,\n      vote_average,\n      overview,\n      genres,\n      poster_path,\n    };\n\n    return dataMovie;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getCast(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { cast } = resp.data;\n\n    const dataCast = cast.map(({ name, character, profile_path, id }) => ({\n      name,\n      character,\n      profile_path,\n      id,\n    }));\n\n    return dataCast;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function getReviews(URL) {\n  try {\n    const resp = await axios.get(URL);\n    const { results } = resp.data;\n\n    const dataReviews = results.map(({ author, content, id }) => ({\n      author,\n      content,\n      id,\n    }));\n\n    return dataReviews;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport { getTrending, getMovieDetails, searchMovies, getCast, getReviews };\n"],"names":["Loader","isLoading","Loading","propTypes","PropTypes","MovieList","dataMovies","location","useLocation","map","movie","movieTitle","title","name","to","id","state","from","propType","isRequired","useSearchParams","setSearchParams","onSubmit","e","preventDefault","inputValue","target","query","value","trim","toLowerCase","reset","className","type","autoComplete","autoFocus","placeholder","useState","dataSearchMovies","setSearchMovies","setIsLoading","error","setError","get","useEffect","searchMovies","resp","length","console","log","getTrending","URL","axios","results","data","dataMovieList","Error","getMovieDetails","vote_average","overview","genres","poster_path","dataMovie","getCast","cast","dataCast","character","profile_path","getReviews","dataReviews","author","content"],"sourceRoot":""}